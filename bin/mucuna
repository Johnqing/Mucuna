#!/usr/bin/env node

'use strict';

var buildMod = require('../build.js');
var fs = require('fs');
var path = require('path');

var gbPath = process.cwd();
var file;
var value;
var args = process.argv.slice(2);

if (args[0] && /^[^-]|\//.test(args[0])) {
	file = args.shift();
}
// 文件写入
function writeFile(file, code) {
    fs.open(file, "w", '0666');
    fs.writeFileSync(file, code);
};
var help = function () {
	var hArr = ['==================Mucuna Detail======================'];
	hArr.push('Usage: mucuna <config.json>');
	hArr.push('build config file                     -a/--add');
	hArr.push('check version                         -v/--version');
	hArr.push('check help                            -h/--help');
	hArr.push('==================Mucuna Detail end======================');
	process.stdout.write(hArr.join('\n\n'));
};

var addConf = function(){
    var jsonCode = ['{',
		'"binPath": "output",',
		'"srcPath": "src",',
		'"template": "html",',
		'"combo_file": "combo",',
		'"author": "your name"',
		'}'].join('\n');
    var gp = path.resolve(gbPath, 'config.json');
    writeFile(gp, jsonCode);
}


while (args.length > 0) {
	value = args.shift();
	switch (value) {
		case '-h':
		case '--help':
			help();
			process.exit();
			break;
        case '-a':
        case '--add':
            addConf();
            break;
		case '-v':
		case '--version':
			var version = require('../package.json').version;
			process.stdout.write(version + '\n');
			process.exit();
			break;
		default:
			if (!file) {
				file = value;
			}
	}
}


if (!file) {
	help();
	process.exit(1);
}


if (!fs.existsSync(file)) {
	help();
	process.exit(1);
};
// 解析配置文件
function parConfig(path){
    var code = fs.readFileSync(path, 'utf-8');
    return JSON.parse(code);
}
file = parConfig(file);
buildMod.build(gbPath, file);