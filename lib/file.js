// Generated by CoffeeScript 1.6.3
(function() {
  var fs, getAllFiles, path, rootPath;

  fs = require('fs');

  rootPath = process.argv[2];

  path = require("path");

  /*
  * getAllFiles
  * @param {String} root 路径
  * @param {Function} callback 回调
  */


  exports.getAllFiles = getAllFiles = function(root, callback) {
    var files, res;
    res = [];
    files = fs.readdirSync(root);
    files.forEach(function(file) {
      var pathname, stat;
      pathname = "" + root + "/" + file;
      stat = fs.lstatSync(pathname);
      if (!stat.isDirectory()) {
        return res.push(pathname.replace(rootPath, '.'));
      } else {
        return res = res.concat(getAllFiles(pathname));
      }
    });
    return res;
  };

  /*
  * mkdirSync
  * @param {String} folderPath 路径
  * @param {Number} mode 文件夹权限
  * @param {Function} callback 回调
  */


  exports.mkdirSync = function(folderPath, mode, callback) {
    var arr, inner;
    arr = folderPath.split("/");
    if (typeof mode === 'function') {
      callback = mode;
      mode = '0755';
    }
    if (arr[0] === ".") {
      arr.shift();
    }
    if (arr[0] === "..") {
      arr.splice(0, 2, arr[0] + "/" + arr[1]);
    }
    inner = function(cur) {
      if (!path.existsSync(cur)) {
        fs.mkdirSync(cur, mode);
      }
      if (arr.length) {
        inner(cur + "/" + arr.shift());
      } else {
        callback && callback();
      }
    };
    arr.length && inner(arr.shift());
  };

  exports.writeFile = function(file, codes, callback) {
    fs.open(file, "w", "0644", function(e, fd) {
      if (e) {
        global.errorLogs.logFn(e);
      }
      fs.writeSync(fd, codes, 0, 'utf8', function(er) {
        if (er) {
          global.errorLogs.logFn(er);
        }
        fs.closeSync(fd);
        callback && callback;
      });
    });
  };

  /*
  * 复制文件
  * @param {String} from 文件源
  * @param {String} to 目标文件
  * @param {Function} callback 回调
  */


  exports.copy = function(from, to, callback) {
    var input, output;
    input = fs.createReadStream(from);
    output = fs.createWriteStream(to);
    input.on("data", function(d) {
      console.log(d);
      return output.write(d);
    });
    input.on("error", function(error) {
      global.errorLogs.logFn(error);
    });
    input.on("end", function() {
      output.end();
      callback && callback();
    });
  };

}).call(this);
