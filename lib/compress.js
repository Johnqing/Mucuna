// Generated by CoffeeScript 1.6.3
(function() {
  var CleanCSS, UglifyJS, conf, crypto, fileHelper, fs, md5, minify, smushit;

  crypto = require('crypto');

  fs = require('fs');

  conf = require('../config/sysConfig');

  UglifyJS = require("uglify-js");

  CleanCSS = require('clean-css');

  smushit = require('node-smushit');

  fileHelper = require('./file');

  md5 = function(str) {
    var md5sum;
    md5sum = crypto.createHash('md5');
    md5sum.update(str);
    str = md5sum.digest('hex');
    return str;
  };

  minify = {
    js: function(path) {
      return UglifyJS.minify(path).code;
    },
    css: function(path) {
      var code;
      code = fs.readFileSync(path, "utf8");
      code = code.replace(/\s/g, '');
      return new CleanCSS().minify(code);
    },
    img: function(form, target) {
      return fileHelper.copy(form, target, function() {
        return smushit.smushit(target);
      });
    },
    html: function(form, target) {
      var html, html_v_arr, i, path, staticFile, vStr, ver, _i, _len;
      html = fs.readFileSync(form, "utf8");
      html_v_arr = html.match(conf.HTML_V_PATH);
      console.log(html_v_arr);
      for (_i = 0, _len = html_v_arr.length; _i < _len; _i++) {
        i = html_v_arr[_i];
        path = i.match(/(src|href)=['"]?([^'"]*)['"]?/i);
        staticFile = fs.readFileSync(form, "utf8");
        vStr = md5(staticFile);
        vStr = vStr.substring(vStr.length - 8, vStr.length);
        if (i.indexOf('?v=') !== -1) {
          ver = i.replace(/(v=).*&/, "v=" + vStr + "&");
        } else {
          ver = "" + i + "?v=" + vStr;
        }
        html = html.replace(i, ver);
      }
      fileHelper.writeFile(target, html);
    }
  };

  module.exports = function(form, target, type) {
    if (/js|css/.test(type)) {
      return minify[type](form);
    }
    if (/jpg|jpeg|gif|png/.test(type)) {
      minify['img'](form, target);
    }
    if (global.base.htmlTpl === type) {
      return minify[type](form, target);
    }
  };

}).call(this);
